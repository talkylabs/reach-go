/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

    "github.com/talkylabs/reach-go/client"
)


// Optional parameters for the method 'CreateConfiguration'
type CreateConfigurationParams struct {
    // The name of the authentication service attached to this configuration. It can be up to 40 characters long.
    ServiceName *string `json:"serviceName,omitempty"`
    // The length of the code to be generated. It must be a value between 4 and 10, inclusive. If not specified, the default value is 5.
    CodeLength *int `json:"codeLength,omitempty"`
    // A flag indicating if the configuration should allow sending custom and non-generated code.
    AllowCustomCode *bool `json:"allowCustomCode,omitempty"`
    // A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication.
    UsedForDigitalPayment *bool `json:"usedForDigitalPayment,omitempty"`
    // It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between.   It also means that the code sent for the autentication remains the same during its validity period until the autentication is successful. In other words, if another authentication request is asked within that period, the same code will be sent.  If not specified, the default value is 15 minutes. It must be any value between 1 and 1440 which represents 24 hours. 
    DefaultExpiryTime *int `json:"defaultExpiryTime,omitempty"`
    // It represents the maximum number of trials per authentication. The default value is 5. 
    DefaultMaxTrials *int `json:"defaultMaxTrials,omitempty"`
    // It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive. The default value is 3. 
    DefaultMaxControls *int `json:"defaultMaxControls,omitempty"`
    // This is the ID of the SMTP settings used by this configuration. It is mandatory to provide this parameter in order to send the authentication code via email. An SMTPSetting can be created via the web application in an easy way.
    SmtpSettingId *string `json:"smtpSettingId,omitempty"`
    // This is the ID of the default email template to use for sending authenetication codes via email. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ```   
    EmailTemplateId *string `json:"emailTemplateId,omitempty"`
    // This is the ID of the default sms template to use for sending authenetication codes via sms. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ``` 
    SmsTemplateId *string `json:"smsTemplateId,omitempty"`
}

func (params *CreateConfigurationParams) SetServiceName(ServiceName string) (*CreateConfigurationParams){
    params.ServiceName = &ServiceName
    return params
}
func (params *CreateConfigurationParams) SetCodeLength(CodeLength int) (*CreateConfigurationParams){
    params.CodeLength = &CodeLength
    return params
}
func (params *CreateConfigurationParams) SetAllowCustomCode(AllowCustomCode bool) (*CreateConfigurationParams){
    params.AllowCustomCode = &AllowCustomCode
    return params
}
func (params *CreateConfigurationParams) SetUsedForDigitalPayment(UsedForDigitalPayment bool) (*CreateConfigurationParams){
    params.UsedForDigitalPayment = &UsedForDigitalPayment
    return params
}
func (params *CreateConfigurationParams) SetDefaultExpiryTime(DefaultExpiryTime int) (*CreateConfigurationParams){
    params.DefaultExpiryTime = &DefaultExpiryTime
    return params
}
func (params *CreateConfigurationParams) SetDefaultMaxTrials(DefaultMaxTrials int) (*CreateConfigurationParams){
    params.DefaultMaxTrials = &DefaultMaxTrials
    return params
}
func (params *CreateConfigurationParams) SetDefaultMaxControls(DefaultMaxControls int) (*CreateConfigurationParams){
    params.DefaultMaxControls = &DefaultMaxControls
    return params
}
func (params *CreateConfigurationParams) SetSmtpSettingId(SmtpSettingId string) (*CreateConfigurationParams){
    params.SmtpSettingId = &SmtpSettingId
    return params
}
func (params *CreateConfigurationParams) SetEmailTemplateId(EmailTemplateId string) (*CreateConfigurationParams){
    params.EmailTemplateId = &EmailTemplateId
    return params
}
func (params *CreateConfigurationParams) SetSmsTemplateId(SmsTemplateId string) (*CreateConfigurationParams){
    params.SmsTemplateId = &SmsTemplateId
    return params
}

// This operation allows to create a Reach Authentix configuration. 
func (c *ApiService) CreateConfiguration(params *CreateConfigurationParams) (*ConfigurationItem, error) {
    path := "/rest/authentix/v1/configurations"
    
data := url.Values{}
headers := make(map[string]interface{})

if params != nil && params.ServiceName != nil {
    data.Set("serviceName", *params.ServiceName)
}
if params != nil && params.CodeLength != nil {
    data.Set("codeLength", fmt.Sprint(*params.CodeLength))
}
if params != nil && params.AllowCustomCode != nil {
    data.Set("allowCustomCode", fmt.Sprint(*params.AllowCustomCode))
}
if params != nil && params.UsedForDigitalPayment != nil {
    data.Set("usedForDigitalPayment", fmt.Sprint(*params.UsedForDigitalPayment))
}
if params != nil && params.DefaultExpiryTime != nil {
    data.Set("defaultExpiryTime", fmt.Sprint(*params.DefaultExpiryTime))
}
if params != nil && params.DefaultMaxTrials != nil {
    data.Set("defaultMaxTrials", fmt.Sprint(*params.DefaultMaxTrials))
}
if params != nil && params.DefaultMaxControls != nil {
    data.Set("defaultMaxControls", fmt.Sprint(*params.DefaultMaxControls))
}
if params != nil && params.SmtpSettingId != nil {
    data.Set("smtpSettingId", *params.SmtpSettingId)
}
if params != nil && params.EmailTemplateId != nil {
    data.Set("emailTemplateId", *params.EmailTemplateId)
}
if params != nil && params.SmsTemplateId != nil {
    data.Set("smsTemplateId", *params.SmsTemplateId)
}



    resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ConfigurationItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.   
func (c *ApiService) DeleteConfiguration(ConfigurationId string, ) (error) {
    path := "/rest/authentix/v1/configurations/{configurationId}"
        path = strings.Replace(path, "{"+"configurationId"+"}", ConfigurationId, -1)

data := url.Values{}
headers := make(map[string]interface{})




    resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

// This operation allows to fetch the API record associated with a configuration.  This operation needs the `configurationId` of the configuration to be fetched.   
func (c *ApiService) FetchConfiguration(ConfigurationId string, ) (*ConfigurationItem, error) {
    path := "/rest/authentix/v1/configurations/{configurationId}"
        path = strings.Replace(path, "{"+"configurationId"+"}", ConfigurationId, -1)

data := url.Values{}
headers := make(map[string]interface{})




    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ConfigurationItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Optional parameters for the method 'ListConfigurations'
type ListConfigurationsParams struct {
    // Maximum number of records to return per call.
    PageSize *int `json:"pageSize,omitempty"`
    // Max number of records to return.
    Limit *int `json:"limit,omitempty"`
}

func (params *ListConfigurationsParams) SetPageSize(PageSize int) (*ListConfigurationsParams){
    params.PageSize = &PageSize
    return params
}
func (params *ListConfigurationsParams) SetLimit(Limit int) (*ListConfigurationsParams){
    params.Limit = &Limit
    return params
}

// Retrieve a single page of Configurations records from the API. Request is executed immediately.
func (c *ApiService) PageConfigurations(params *ListConfigurationsParams, pageNumber string) (*PaginatedConfigurationItemList, error) {
    path := "/rest/authentix/v1/configurations"

    
data := url.Values{}
headers := make(map[string]interface{})

if params != nil && params.PageSize != nil {
    data.Set("pageSize", fmt.Sprint(*params.PageSize))
}

    if pageNumber != "" {
        data.Set("page", pageNumber)
    }

    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PaginatedConfigurationItemList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Lists Configurations records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListConfigurations(params *ListConfigurationsParams) ([]ConfigurationItem, error) {
	response, errors := c.StreamConfigurations(params)

	records := make([]ConfigurationItem, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Configurations records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamConfigurations(params *ListConfigurationsParams) (chan ConfigurationItem, chan error) {
	if params == nil {
		params = &ListConfigurationsParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan ConfigurationItem, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageConfigurations(params, "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamConfigurations(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}


func (c *ApiService) streamConfigurations(response *PaginatedConfigurationItemList, params *ListConfigurationsParams, recordChannel chan ConfigurationItem, errorChannel chan error) {
	curRecord := 1
	
	path := "/rest/authentix/v1/configurations"

    
data := url.Values{}

if params != nil && params.PageSize != nil {
    data.Set("pageSize", fmt.Sprint(*params.PageSize))
}

    
    baseURL, err0 := client.UrlWithoutPaginationInfo(c.baseURL+path, data)
    if err0 != nil {
		errorChannel <- err0
		return
	}

	for response != nil {
		responseRecords := response.Configurations
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(baseURL, response, c.getNextPaginatedConfigurationItemList)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*PaginatedConfigurationItemList)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextPaginatedConfigurationItemList(nextPageUrl string) (interface{}, error) {
    if nextPageUrl == "" {
        return nil, nil
    }
    resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PaginatedConfigurationItemList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }
    return ps, nil
}


// Optional parameters for the method 'UpdateConfiguration'
type UpdateConfigurationParams struct {
    // The name of the authentication service attached to this configuration. It can be up to 40 characters long.
    ServiceName *string `json:"serviceName,omitempty"`
    // The length of the code to be generated. It must be a value between 4 and 10, inclusive.
    CodeLength *int `json:"codeLength,omitempty"`
    // A flag indicating if the configuration should allow sending custom and non-generated code.
    AllowCustomCode *bool `json:"allowCustomCode,omitempty"`
    // A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication.
    UsedForDigitalPayment *bool `json:"usedForDigitalPayment,omitempty"`
    // It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between. It must be any value between 1 and 1440 which represents 24 hours.
    DefaultExpiryTime *int `json:"defaultExpiryTime,omitempty"`
    // It represents the maximum number of trials per authentication. 
    DefaultMaxTrials *int `json:"defaultMaxTrials,omitempty"`
    // It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive. 
    DefaultMaxControls *int `json:"defaultMaxControls,omitempty"`
    // This is the ID of the SMTP settings used by this configuration. It is mandatory for sending authentication codes via email.
    SmtpSettingId *string `json:"smtpSettingId,omitempty"`
    // This is the ID of the default email template to use for sending authenetication codes via email. 
    EmailTemplateId *string `json:"emailTemplateId,omitempty"`
    // This is the ID of the default sms template to use for sending authenetication codes via sms. 
    SmsTemplateId *string `json:"smsTemplateId,omitempty"`
}

func (params *UpdateConfigurationParams) SetServiceName(ServiceName string) (*UpdateConfigurationParams){
    params.ServiceName = &ServiceName
    return params
}
func (params *UpdateConfigurationParams) SetCodeLength(CodeLength int) (*UpdateConfigurationParams){
    params.CodeLength = &CodeLength
    return params
}
func (params *UpdateConfigurationParams) SetAllowCustomCode(AllowCustomCode bool) (*UpdateConfigurationParams){
    params.AllowCustomCode = &AllowCustomCode
    return params
}
func (params *UpdateConfigurationParams) SetUsedForDigitalPayment(UsedForDigitalPayment bool) (*UpdateConfigurationParams){
    params.UsedForDigitalPayment = &UsedForDigitalPayment
    return params
}
func (params *UpdateConfigurationParams) SetDefaultExpiryTime(DefaultExpiryTime int) (*UpdateConfigurationParams){
    params.DefaultExpiryTime = &DefaultExpiryTime
    return params
}
func (params *UpdateConfigurationParams) SetDefaultMaxTrials(DefaultMaxTrials int) (*UpdateConfigurationParams){
    params.DefaultMaxTrials = &DefaultMaxTrials
    return params
}
func (params *UpdateConfigurationParams) SetDefaultMaxControls(DefaultMaxControls int) (*UpdateConfigurationParams){
    params.DefaultMaxControls = &DefaultMaxControls
    return params
}
func (params *UpdateConfigurationParams) SetSmtpSettingId(SmtpSettingId string) (*UpdateConfigurationParams){
    params.SmtpSettingId = &SmtpSettingId
    return params
}
func (params *UpdateConfigurationParams) SetEmailTemplateId(EmailTemplateId string) (*UpdateConfigurationParams){
    params.EmailTemplateId = &EmailTemplateId
    return params
}
func (params *UpdateConfigurationParams) SetSmsTemplateId(SmsTemplateId string) (*UpdateConfigurationParams){
    params.SmsTemplateId = &SmsTemplateId
    return params
}

// This operation allows to update the attributes of a configuration. 
func (c *ApiService) UpdateConfiguration(ConfigurationId string, params *UpdateConfigurationParams) (*ConfigurationItem, error) {
    path := "/rest/authentix/v1/configurations/{configurationId}"
        path = strings.Replace(path, "{"+"configurationId"+"}", ConfigurationId, -1)

data := url.Values{}
headers := make(map[string]interface{})

if params != nil && params.ServiceName != nil {
    data.Set("serviceName", *params.ServiceName)
}
if params != nil && params.CodeLength != nil {
    data.Set("codeLength", fmt.Sprint(*params.CodeLength))
}
if params != nil && params.AllowCustomCode != nil {
    data.Set("allowCustomCode", fmt.Sprint(*params.AllowCustomCode))
}
if params != nil && params.UsedForDigitalPayment != nil {
    data.Set("usedForDigitalPayment", fmt.Sprint(*params.UsedForDigitalPayment))
}
if params != nil && params.DefaultExpiryTime != nil {
    data.Set("defaultExpiryTime", fmt.Sprint(*params.DefaultExpiryTime))
}
if params != nil && params.DefaultMaxTrials != nil {
    data.Set("defaultMaxTrials", fmt.Sprint(*params.DefaultMaxTrials))
}
if params != nil && params.DefaultMaxControls != nil {
    data.Set("defaultMaxControls", fmt.Sprint(*params.DefaultMaxControls))
}
if params != nil && params.SmtpSettingId != nil {
    data.Set("smtpSettingId", *params.SmtpSettingId)
}
if params != nil && params.EmailTemplateId != nil {
    data.Set("emailTemplateId", *params.EmailTemplateId)
}
if params != nil && params.SmsTemplateId != nil {
    data.Set("smsTemplateId", *params.SmsTemplateId)
}



    resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ConfigurationItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
