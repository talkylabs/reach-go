/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

    "time"
    "github.com/talkylabs/reach-go/client"
)


// This operation allows to fetch the API record associated with an authentication trial.   
func (c *ApiService) FetchAthenticationTrial(TrialId string, ) (*AuthenticationTrialItem, error) {
    path := "/rest/authentix/v1/authenticationTrials/{trialId}"
        path = strings.Replace(path, "{"+"trialId"+"}", TrialId, -1)

data := url.Values{}
headers := make(map[string]interface{})




    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AuthenticationTrialItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Optional parameters for the method 'ListAuthenticationTrials'
type ListAuthenticationTrialsParams struct {
    // Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
    Dest *string `json:"dest,omitempty"`
    // Retrieve authentication trials with the specified status.
    TrialStatus *string `json:"trialStatus,omitempty"`
    // Retrieve authentication trials sent via the specified channel.
    Channel *string `json:"channel,omitempty"`
    // Retrieve authentication trials from the configuration whose ID matches the specified one.
    ConfigurationId *string `json:"configurationId,omitempty"`
    // Retrieve authentication trials from the authentication whose ID matches the specified one.
    AuthenticationId *string `json:"authenticationId,omitempty"`
    // Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
    Country *string `json:"country,omitempty"`
    // Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
    SentAt *time.Time `json:"sentAt,omitempty"`
    // Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
    SentAfter *time.Time `json:"sentAfter,omitempty"`
    // Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
    SentBefore *time.Time `json:"sentBefore,omitempty"`
    // Maximum number of records to return per call.
    PageSize *int `json:"pageSize,omitempty"`
    // Max number of records to return.
    Limit *int `json:"limit,omitempty"`
}

func (params *ListAuthenticationTrialsParams) SetDest(Dest string) (*ListAuthenticationTrialsParams){
    params.Dest = &Dest
    return params
}
func (params *ListAuthenticationTrialsParams) SetTrialStatus(TrialStatus string) (*ListAuthenticationTrialsParams){
    params.TrialStatus = &TrialStatus
    return params
}
func (params *ListAuthenticationTrialsParams) SetChannel(Channel string) (*ListAuthenticationTrialsParams){
    params.Channel = &Channel
    return params
}
func (params *ListAuthenticationTrialsParams) SetConfigurationId(ConfigurationId string) (*ListAuthenticationTrialsParams){
    params.ConfigurationId = &ConfigurationId
    return params
}
func (params *ListAuthenticationTrialsParams) SetAuthenticationId(AuthenticationId string) (*ListAuthenticationTrialsParams){
    params.AuthenticationId = &AuthenticationId
    return params
}
func (params *ListAuthenticationTrialsParams) SetCountry(Country string) (*ListAuthenticationTrialsParams){
    params.Country = &Country
    return params
}
func (params *ListAuthenticationTrialsParams) SetSentAt(SentAt time.Time) (*ListAuthenticationTrialsParams){
    params.SentAt = &SentAt
    return params
}
func (params *ListAuthenticationTrialsParams) SetSentAfter(SentAfter time.Time) (*ListAuthenticationTrialsParams){
    params.SentAfter = &SentAfter
    return params
}
func (params *ListAuthenticationTrialsParams) SetSentBefore(SentBefore time.Time) (*ListAuthenticationTrialsParams){
    params.SentBefore = &SentBefore
    return params
}
func (params *ListAuthenticationTrialsParams) SetPageSize(PageSize int) (*ListAuthenticationTrialsParams){
    params.PageSize = &PageSize
    return params
}
func (params *ListAuthenticationTrialsParams) SetLimit(Limit int) (*ListAuthenticationTrialsParams){
    params.Limit = &Limit
    return params
}

// Retrieve a single page of AuthenticationTrials records from the API. Request is executed immediately.
func (c *ApiService) PageAuthenticationTrials(params *ListAuthenticationTrialsParams, pageNumber string) (*PaginatedAuthenticationTrialItemList, error) {
    path := "/rest/authentix/v1/authenticationTrials"

    
data := url.Values{}
headers := make(map[string]interface{})

if params != nil && params.Dest != nil {
    data.Set("dest", *params.Dest)
}
if params != nil && params.TrialStatus != nil {
    data.Set("trialStatus", *params.TrialStatus)
}
if params != nil && params.Channel != nil {
    data.Set("channel", *params.Channel)
}
if params != nil && params.ConfigurationId != nil {
    data.Set("configurationId", *params.ConfigurationId)
}
if params != nil && params.AuthenticationId != nil {
    data.Set("authenticationId", *params.AuthenticationId)
}
if params != nil && params.Country != nil {
    data.Set("country", *params.Country)
}
if params != nil && params.SentAt != nil {
    data.Set("sentAt", fmt.Sprint((*params.SentAt).Format(time.RFC3339)))
}
if params != nil && params.SentAfter != nil {
    data.Set("sentAfter", fmt.Sprint((*params.SentAfter).Format(time.RFC3339)))
}
if params != nil && params.SentBefore != nil {
    data.Set("sentBefore", fmt.Sprint((*params.SentBefore).Format(time.RFC3339)))
}
if params != nil && params.PageSize != nil {
    data.Set("pageSize", fmt.Sprint(*params.PageSize))
}

    if pageNumber != "" {
        data.Set("page", pageNumber)
    }

    resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PaginatedAuthenticationTrialItemList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

// Lists AuthenticationTrials records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListAuthenticationTrials(params *ListAuthenticationTrialsParams) ([]AuthenticationTrialItem, error) {
	response, errors := c.StreamAuthenticationTrials(params)

	records := make([]AuthenticationTrialItem, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams AuthenticationTrials records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamAuthenticationTrials(params *ListAuthenticationTrialsParams) (chan AuthenticationTrialItem, chan error) {
	if params == nil {
		params = &ListAuthenticationTrialsParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan AuthenticationTrialItem, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageAuthenticationTrials(params, "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamAuthenticationTrials(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}


func (c *ApiService) streamAuthenticationTrials(response *PaginatedAuthenticationTrialItemList, params *ListAuthenticationTrialsParams, recordChannel chan AuthenticationTrialItem, errorChannel chan error) {
	curRecord := 1
	
	path := "/rest/authentix/v1/authenticationTrials"

    
data := url.Values{}

if params != nil && params.Dest != nil {
    data.Set("dest", *params.Dest)
}
if params != nil && params.TrialStatus != nil {
    data.Set("trialStatus", *params.TrialStatus)
}
if params != nil && params.Channel != nil {
    data.Set("channel", *params.Channel)
}
if params != nil && params.ConfigurationId != nil {
    data.Set("configurationId", *params.ConfigurationId)
}
if params != nil && params.AuthenticationId != nil {
    data.Set("authenticationId", *params.AuthenticationId)
}
if params != nil && params.Country != nil {
    data.Set("country", *params.Country)
}
if params != nil && params.SentAt != nil {
    data.Set("sentAt", fmt.Sprint((*params.SentAt).Format(time.RFC3339)))
}
if params != nil && params.SentAfter != nil {
    data.Set("sentAfter", fmt.Sprint((*params.SentAfter).Format(time.RFC3339)))
}
if params != nil && params.SentBefore != nil {
    data.Set("sentBefore", fmt.Sprint((*params.SentBefore).Format(time.RFC3339)))
}
if params != nil && params.PageSize != nil {
    data.Set("pageSize", fmt.Sprint(*params.PageSize))
}

    
    baseURL, err0 := client.UrlWithoutPaginationInfo(c.baseURL+path, data)
    if err0 != nil {
		errorChannel <- err0
		return
	}

	for response != nil {
		responseRecords := response.AuthenticationTrials
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(baseURL, response, c.getNextPaginatedAuthenticationTrialItemList)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*PaginatedAuthenticationTrialItemList)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextPaginatedAuthenticationTrialItemList(nextPageUrl string) (interface{}, error) {
    if nextPageUrl == "" {
        return nil, nil
    }
    resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PaginatedAuthenticationTrialItemList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }
    return ps, nil
}

