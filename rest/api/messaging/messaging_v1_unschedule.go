/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Messaging API
 * Reach SMS API helps you add robust messaging capabilities to your applications.  Using this REST API, you can * send SMS messages * track the delivery of sent messages * schedule SMS messages to send at a later time * retrieve and modify message history
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"

)


// Optional parameters for the method 'UnscheduleMessage'
type UnscheduleMessageParams struct {
    // The identifier of the message to be unscheduled.
    MessageId *string `json:"messageId,omitempty"`
}

func (params *UnscheduleMessageParams) SetMessageId(MessageId string) (*UnscheduleMessageParams){
    params.MessageId = &MessageId
    return params
}

// This operation allows to cancel a previously scheduled message.  This operation needs the `messageId` of the message to be unscheduled. To unschedule multiple messages, this operation should be called as many times needed since it can only unschedule one message at a time.  Note: The system will make the best attempt to cancel a scheduled message when a request is received. 
func (c *ApiService) UnscheduleMessage(params *UnscheduleMessageParams) (*MessageItem, error) {
    path := "/rest/messaging/v1/unschedule"
    
data := url.Values{}
headers := make(map[string]interface{})

if params != nil && params.MessageId != nil {
    data.Set("messageId", *params.MessageId)
}



    resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &MessageItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
