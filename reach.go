/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// Package reach provides bindings for Reach@TalkyLabs's REST APIs.
package reach

import (
	"os"
	"time"

	"github.com/talkylabs/reach-go/client"
	Authentix "github.com/talkylabs/reach-go/rest/api/authentix"
	Messaging "github.com/talkylabs/reach-go/rest/api/messaging"
)

// RestClient provides access to Reach services.
type RestClient struct {
	*client.RequestHandler
	Authentix *Authentix.ApiService
	Messaging *Messaging.ApiService
}

// Meta holds relevant pagination resources.
type Meta struct {
	Page           *int  `json:"page"`
	PageSize       *int  `json:"pageSize"`
	TotalPages     *int  `json:"totalPages"`
	outOfPageRange *bool `json:"outOfPageRange"`
}

type ClientParams struct {
	ApiUser string
	ApiKey  string
	Client   client.BaseClient
}

// NewRestClientWithParams provides an initialized Reach RestClient with params.
func NewRestClientWithParams(params ClientParams) *RestClient {
	requestHandler := client.NewRequestHandler(params.Client)

	if params.Client == nil {
		ApiUser := params.ApiUser
		if ApiUser == "" {
			ApiUser = os.Getenv("REACH_TALKYLABS_API_USER")
		}

		ApiKey := params.ApiKey
		if ApiKey == "" {
			ApiKey = os.Getenv("REACH_TALKYLABS_API_KEY")
		}

		defaultClient := &client.Client{
			Credentials: client.NewCredentials(ApiUser, ApiKey),
		}

		requestHandler = client.NewRequestHandler(defaultClient)
	}

	c := &RestClient{
		RequestHandler: requestHandler,
	}

	c.Authentix = Authentix.NewApiService(c.RequestHandler)
	c.Messaging = Messaging.NewApiService(c.RequestHandler)

	return c
}

// NewRestClient provides an initialized Reach RestClient.
func NewRestClient() *RestClient {
	return NewRestClientWithParams(ClientParams{})
}

// SetTimeout sets the Timeout for Reach HTTP requests.
func (c *RestClient) SetTimeout(timeout time.Duration) {
	c.RequestHandler.Client.SetTimeout(timeout)
}
